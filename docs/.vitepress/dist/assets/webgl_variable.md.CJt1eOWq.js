import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.De32BR7G.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"webgl/variable.md","filePath":"webgl/variable.md"}'),t={name:"webgl/variable.md"},l=n(`<h3 id="何时在顶点着色器写逻辑" tabindex="-1">何时在顶点着色器写逻辑 <a class="header-anchor" href="#何时在顶点着色器写逻辑" aria-label="Permalink to &quot;何时在顶点着色器写逻辑&quot;">​</a></h3><p>顶点着色器主要负责处理每个顶点的数据，包括顶点的位置、颜色、纹理坐标等。以下情况适合在顶点着色器中写逻辑：<br> 1、顶点变换：顶点着色器需要执行模型变换、视图变换和投影变换，将顶点从模型空间变换到裁剪空间。<br> 2、顶点光照：如果需要逐顶点光照计算，可以在顶点着色器中实现。不过，逐顶点光照通常用于简化光照模型，以节省计算量。<br> 3、纹理坐标处理：顶点着色器可以传递或修改纹理坐标，以便在片元着色器中使用。</p><h3 id="何时在片元着色器写逻辑" tabindex="-1">何时在片元着色器写逻辑 <a class="header-anchor" href="#何时在片元着色器写逻辑" aria-label="Permalink to &quot;何时在片元着色器写逻辑&quot;">​</a></h3><p>片元着色器负责处理光栅化阶段产生的每个片元的数据，计算片元的最终颜色。以下情况适合在片元着色器中写逻辑：<br> 1、逐片元光照：对于更精确的光照计算，如逐片元光照模型，需要在片元着色器中实现。<br> 2、纹理采样：片元着色器根据纹理坐标和采样器对纹理进行采样，获取纹理颜色。<br> 3、颜色混合：片元着色器可以执行颜色混合操作，将计算出的颜色与帧缓冲区中对应位置的颜色进行混合。</p><h2 id="attribute" tabindex="-1">attribute <a class="header-anchor" href="#attribute" aria-label="Permalink to &quot;attribute&quot;">​</a></h2><p>(数据传递)javascript 语言传给——&gt;顶点着色器<br> (声明变量)声明顶点数据变量</p><h3 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h3><p>attribute 关键字通常用来声明与顶点数据相关的变量，比如顶点位置坐标数据、顶点颜色数据、顶点法向量数据，等等。</p><p>顶点着色器中通过 attribute 关键字声明的顶点变量，javascript 代码可以通过相关的 WebGL API 把顶点的数据传递给着色器中相应的顶点变量。</p><p>因为 javascript 没必要给片元着色器传递顶点数据，所以规定 attribute 关键字只能在顶点着色器中声明变量使用。只要注意 attribute 关键字声明顶点变量代码位于主函数 main 之外就可以。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// attribute声明顶点位置变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">attribute vec4 position;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// attribute声明顶点颜色变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">attribute vec4 a_color;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// attribute声明顶点法向量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">attribute vec4 normal;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 与顶点相关的浮点数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">attribute float scale;</span></span></code></pre></div><p>同一个顶点着色器通常需要处理是一批顶点数据，一个顶点可能会有多种数据，比如顶点位置、颜色、法向量，还有其它自定义的，比如 attribute float scale;，声明了一个 scale 变量。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// attribute声明顶点位置变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">attribute vec4 position;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 与顶点相关的浮点数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">attribute float scale;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 每个顶点的x坐标乘以该顶点对应的一个系数scale</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  gl_Position </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vec4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(position.x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scale,position.y,position.z,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="uniform" tabindex="-1">uniform <a class="header-anchor" href="#uniform" aria-label="Permalink to &quot;uniform&quot;">​</a></h2><p>(数据传递)javascript 语言传给——&gt;顶点、片元着色器<br> (声明变量)声明非顶点数据变量</p><h3 id="作用-1" tabindex="-1">作用 <a class="header-anchor" href="#作用-1" aria-label="Permalink to &quot;作用&quot;">​</a></h3><p>uniform 关键字出现的目的就是为了 javascript 可以通过相关的 WebGL API 给着色器变量传递数据，比如传递一个光源的位置数据、一个光源的方向数据、一个光源的颜色数据、一个用于顶点变换的模型矩阵、一个用于顶点变换的视图矩阵，等等。</p><p>不过要注意如果是顶点相关的变量，比如顶点位置、顶点颜色等顶点数据相关变量不能使用关键字 uniform 去声明，主要是顶点的数据往往不是一个，通常有很多个顶点，而且这些顶点都要逐顶点执行 main 函数中的程序，所以为了声明顶点数据相关的变量，着色器语言规定了一个新的关键字 attribute。</p><p>javascript 可以给顶点着色器的变量传递数据，也可以给片元着色器的变量传递数据，也就是说 uniform 关键字既可以在顶点着色器中使用，也可以在片元着色器中使用。只要注意 uniform 关键字声明变量需要在主函数 main 之前声明。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uniform mat4 worldViewProjection;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uniform sampler2D textureSampler;</span></span></code></pre></div><h2 id="varying" tabindex="-1">varying <a class="header-anchor" href="#varying" aria-label="Permalink to &quot;varying&quot;">​</a></h2><p>(数据传递)顶点着色器传给——&gt;片元着色器<br> (声明变量)声明需要插值计算的顶点变量</p><h3 id="作用-2" tabindex="-1">作用 <a class="header-anchor" href="#作用-2" aria-label="Permalink to &quot;作用&quot;">​</a></h3><p>attribute vec4 a_color;在顶点着色器中声明了一个顶点颜色变量，如果想在片元着色器中获得顶点颜色插值计算以后的数据，需要同时在顶点着色器和片元着色器中执行 varying vec4 v_color;，也就是在顶点、片元两个着色器代码中都需要通过关键字 varying 声明一个新变量 v_color,最后再顶点着色器中执行 v_color = a_color;即可<br> 顶点着色器</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">attribute vec4 a_color;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// attribute声明顶点颜色变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">varying vec4 v_color;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//varying声明顶点颜色插值后变量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //顶点颜色插值计算</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  v_color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a_color;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>片元着色器</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 接收顶点着色器中v_color数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">varying vec4 v_color;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 插值后颜色数据赋值给对应的片元</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  gl_FragColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v_color;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>varying 类型变量主要是为了完成顶点着色器和片元着色器之间的数据传递和插值计算。比如在一个 WebGL 程序中通过三个顶点绘制一个彩色三角形，三个顶点的位置坐标定义了一个三角形区域，这个三角形区域经过片元着色器处理后会得到由一个个片元或者说像素组成的三角形区域，在片元化的过程中，顶点的颜色数据也会进行插值计算，插值计算之前每个顶点对应一个颜色，插值计算之后，每个片元对应一个颜色值，通过 varying 关键字就可以在片元着色器中获得插值后的颜色数据，然后赋值给片元。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 顶点着色器源码 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vertexShader&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x-shader/x-vertex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  //attribute声明vec4类型变量apos</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  attribute vec4 apos;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  // attribute声明顶点颜色变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  attribute vec4 a_color;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  //varying声明顶点颜色插值后变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  varying vec4 v_color;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  void main() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 顶点坐标apos赋值给内置变量gl_Position</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gl_Position </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> apos;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //顶点颜色插值计算</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    v_color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a_color;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 片元着色器源码 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fragmentShader&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x-shader/x-fragment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  // 所有float类型数据的精度是lowp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  precision lowp float;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  // 接收顶点着色器中v_color数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  varying vec4 v_color;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  void main() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 插值后颜色数据赋值给对应的片元</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gl_FragColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v_color;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="gl" tabindex="-1">gl_ <a class="header-anchor" href="#gl" aria-label="Permalink to &quot;gl\\_&quot;">​</a></h2><p>gl_PointSize：在点渲染模式中，控制方形点区域渲染像素大小（注意这里是像素大小，而不是 three.js 单位，因此在移动相机是，所看到该点在屏幕中的大小不变）<br> gl_Position：控制顶点的位置<br> gl_FragColor：片元的 RGB 颜色值<br> gl_FragCoord：片元的坐标，同样是以像素为单位<br> gl_PointCoord：在点渲染模式中，对应方形像素坐标</p><h2 id="内置的attributes" tabindex="-1">内置的Attributes <a class="header-anchor" href="#内置的attributes" aria-label="Permalink to &quot;内置的Attributes&quot;">​</a></h2><p>position (类型: vec3 或 vec4)：顶点的位置。<br> normal (类型: vec3)：顶点的法线。<br> uv (类型: vec2 或 vec3 或 vec4)：顶点的纹理坐标。<br> color (类型: vec4)：顶点的颜色，如果启用了颜色。<br> tangent (类型: vec3)：顶点的切线，用于法线贴图等高级效果。</p><h2 id="内置的uniforms" tabindex="-1">内置的Uniforms <a class="header-anchor" href="#内置的uniforms" aria-label="Permalink to &quot;内置的Uniforms&quot;">​</a></h2><p>world (类型: mat4)：模型矩阵，表示网格的全局变换状态（移动、旋转、缩放）。<br> worldView (类型: mat4)：模型视图矩阵，是模型矩阵和视图矩阵的乘积。<br> worldViewProjection (类型: mat4)：模型视图投影矩阵，用于将顶点从模型空间转换到裁剪空间。<br> view (类型: mat4)：视图矩阵，表示相机的位置和朝向。<br> projection (类型: mat4)：投影矩阵，用于将裁剪空间的坐标转换为屏幕空间的坐标。<br> viewProjection (类型: mat4)：视图投影矩阵，是视图矩阵和投影矩阵的乘积。<br> worldInverse (类型: mat4)：世界矩阵的逆矩阵。<br> worldViewInverse (类型: mat4)：模型视图矩阵的逆矩阵。<br> worldViewProjectionInverse (类型: mat4)：模型视图投影矩阵的逆矩阵。<br> viewInverse (类型: mat4)：视图矩阵的逆矩阵。<br> projectionInverse (类型: mat4)：投影矩阵的逆矩阵。<br> viewProjectionInverse (类型: mat4)：视图投影矩阵的逆矩阵。<br> time (类型: float)：每帧的时间，用于动画和动态效果。<br> cameraPosition (类型: vec3)：相机在世界空间中的位置。</p>`,35),p=[l];function e(h,r,k,o,E,c){return a(),i("div",null,p)}const y=s(t,[["render",e]]);export{g as __pageData,y as default};
