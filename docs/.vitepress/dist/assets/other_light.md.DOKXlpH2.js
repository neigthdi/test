import{_ as h,D as p,c as t,I as n,w as l,a as s,j as i,a4 as e,o as k}from"./chunks/framework.Br-KnHaE.js";const r="/assets/normalChange.BrxzNR84.png",N=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"other/light.md","filePath":"other/light.md"}'),E={name:"other/light.md"},d=i("h2",{id:"漫反射",tabindex:"-1"},[s("漫反射 "),i("a",{class:"header-anchor",href:"#漫反射","aria-label":'Permalink to "漫反射"'},"​")],-1),o=i("p",null,"在漫反射中，反射光的颜色取决于入射光的颜色、表面的基底色、入射光与表面形成的入射角。我们将入射角定义为入射光与表面的法线形成的夹角，并用θ表示，那么漫反射光的颜色可以根据下面的式子计算得到：",-1),g=i("br",null,null,-1),c=i("br",null,null,-1),y=i("h2",{id:"环境反射",tabindex:"-1"},[s("环境反射 "),i("a",{class:"header-anchor",href:"#环境反射","aria-label":'Permalink to "环境反射"'},"​")],-1),A=i("p",null,"环境反射是针对环境光而言的。在环境反射中，反射光的方向可以认为就是入射光的反方向。有余环境光照射物体的方式就是各方面均匀、强度相等的，所以反射光也是各向均匀的，我们可以这样描述：",-1),F=i("h2",{id:"最终颜色",tabindex:"-1"},[s("最终颜色 "),i("a",{class:"header-anchor",href:"#最终颜色","aria-label":'Permalink to "最终颜色"'},"​")],-1),D=i("h2",{id:"运动中的物体的光照效果",tabindex:"-1"},[s("运动中的物体的光照效果 "),i("a",{class:"header-anchor",href:"#运动中的物体的光照效果","aria-label":'Permalink to "运动中的物体的光照效果"'},"​")],-1),u=i("p",null,[s("很多场景中，物体有可能会动，观察者的视角也很有可能会改变，必须考虑这种情况。首先，先看一下物体变动时，法向量的情况："),i("br"),i("img",{src:r,alt:"image"}),s(" 平移变换不会改变法向量，因为平移不会改变物体的方向。")],-1),v=i("p",null,"旋转变换会改变法向量，因为旋转改变了物体的方向。",-1),_=i("p",null,"缩放变换对法向量的影响较为复杂。如图所见，最右侧的图显示了立方体先旋转了45度，再在y轴上拉伸至原来的2倍的情况。此时法向量改变了，因为表面的朝向改变了。但是，如果缩放比例在所有的轴上都一致的话，那么法向量就不会变化。最后，即使物体在某些轴上的缩放比例并不一致，法向量也并不一定会变化，比如将最左侧图中的立方体在y轴方向上拉伸两倍，法向量就不会变化。",-1),m=i("p",null,"所以，为了处理这种情况，矩阵中引入了一种魔法矩阵：逆转置矩阵。",-1),f=e(`<h3 id="逆矩阵" tabindex="-1">逆矩阵 <a class="header-anchor" href="#逆矩阵" aria-label="Permalink to &quot;逆矩阵&quot;">​</a></h3><p><code>逆矩阵本身并不直接表示缩放，但它在某些情况下可以用于实现与缩放相反的变换。</code></p><p>逆矩阵的定义：逆矩阵是指一个矩阵的逆元，即如果存在一个矩阵B，使得矩阵A乘以B等于单位矩阵I（在相应的数域上），则称B为A的逆矩阵，记为A&quot;。逆矩阵的一个重要性质是，它可以将原矩阵所表示的变换“撤销”或“反转”。</p><p>缩放矩阵的定义：缩放矩阵是一个对角矩阵，其对角线上的元素表示在各个维度上的缩放因子。</p><p><code>矩阵S = </code><br> |sx, 0|<br> |0, sy|</p><p>逆矩阵与缩放矩阵的关系：对于缩放矩阵S，其逆矩阵S&quot;可以通过将对角线上的缩放因子取倒数来得到</p><p><code>矩阵S&quot; = </code><br> |1/sx, 0|<br> |0, 1/sy|</p><p>这个逆矩阵实际上表示了一个与原缩放相反的变换。如果原缩放矩阵S将某个向量在x轴和y轴上分别放大了<code>sx</code>和<code>sy</code>倍，那么逆矩阵S&quot;就会将这个向量在x轴和y轴上分别缩小到原来的<code>1/sx</code>和<code>1/sy</code>倍。</p><p>因此，虽然逆矩阵本身不直接表示缩放，但它可以用于实现与缩放相反的变换，从而在某些情况下可以看作是一种“反向缩放”。</p><h3 id="转置矩阵" tabindex="-1">转置矩阵 <a class="header-anchor" href="#转置矩阵" aria-label="Permalink to &quot;转置矩阵&quot;">​</a></h3><p>转置矩阵在数学和线性代数中扮演着重要的角色，<code>但直接将其与“旋转”联系起来并不总是准确的，因为转置矩阵主要代表的是矩阵行与列的互换，而不是几何意义上的旋转</code>。然而，<code>在特定的上下文中，特别是当涉及到正交矩阵时，转置矩阵与旋转操作之间确实存在一种紧密的联系，因为旋转矩阵是正交矩阵的一种特例</code>。</p><p>转置矩阵的基本定义：给定一个矩阵 A，其转置矩阵 A(t) 是通过将 A 的行与列互换得到的。具体来说，如果 A 是一个 m×n 矩阵，那么 A(t) 是一个 n×m 矩阵。</p><p>正交矩阵与旋转：正交矩阵是一种特殊的方阵，其行向量和列向量都是单位向量且两两正交（即点积为零）。正交矩阵的一个重要性质是其转置矩阵等于其逆矩阵，即 A(t) = A&quot; 。</p><p>在二维和三维空间中，正交矩阵可以表示旋转和/或反射操作。例如，在二维空间中，旋转角度 θ 的正交矩阵可以表示为：</p><p><code>Rθ=</code><br> |cos(θ), −sin(θ)|<br> |sin(θ), cos(θ) |</p><p>这个矩阵的转置矩阵是：</p><p><code>Rθ(t)=</code><br> |cos(θ), sin(θ)|<br> |-sin(θ), cos(θ) |</p><p>值得注意的是，这个转置矩阵实际上表示的是旋转角度 −θ 的操作，因为旋转矩阵的逆矩阵等于其转置矩阵且表示相反的旋转。</p><p>虽然转置矩阵本身并不直接表示旋转，但在正交矩阵的上下文中，转置矩阵与旋转操作之间存在紧密的联系。具体来说，正交矩阵的转置矩阵等于其逆矩阵，且在某些情况下（如二维旋转矩阵），这个逆矩阵可以解释为相反的旋转操作。因此，在正交矩阵的语境下讨论转置矩阵与旋转的关系是合理的，但在更一般的矩阵理论中，这种关系并不成立。</p><h2 id="threejs光照计算" tabindex="-1">threeJs光照计算 <a class="header-anchor" href="#threejs光照计算" aria-label="Permalink to &quot;threeJs光照计算&quot;">​</a></h2><p>1、将光源位置（这是通过参数传入的）乘以模型视图矩阵（这是着色器提供给的），就能得到光源相对于摄像机的位置；<br> 2、将这一位置归一化（就是计算单位向量），得到光源相对于摄像机的角度；<br> 3、将其点乘单位法向量，得到亮度值（两个向量点乘的意思是，获得一个向量在另一个向量上的投影，所以，这里得到的是光源在法向量方向的投影长度，它决定了一个点有多亮）。</p><h4 id="注意-点乘-点积-、叉乘-叉积-二者不一样" tabindex="-1">注意：点乘（点积）、叉乘（叉积），二者不一样 <a class="header-anchor" href="#注意-点乘-点积-、叉乘-叉积-二者不一样" aria-label="Permalink to &quot;注意：点乘（点积）、叉乘（叉积），二者不一样&quot;">​</a></h4><hr><h4 id="顶着色器" tabindex="-1">顶着色器： <a class="header-anchor" href="#顶着色器" aria-label="Permalink to &quot;顶着色器：&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uniform vec3 color;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uniform vec3 light;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">varying vec3 vColor;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">varying vec3 vNormal;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">varying vec3 vLight;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // pass to fs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> color;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // normalize: 归一化方法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 法向矩阵乘以法向量，并将其归一化后，传递给 vNormal。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 这是为了将物体坐标系下的法向量方向，转变成视图坐标系下的法向量方向。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 但是不能和光源位置 light 一样乘以 modelViewMatrix。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 虽然都是三维向量，但法向量表示的是一个方向，而光源位置表示的是一个坐标。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 如果用法向量乘以 modelViewMatrix 的话，得到的结果就可能不再垂直于面片了。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vNormal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> normalize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(normalMatrix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> normal);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // viewMatrix: 视图矩阵</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 使用光源位置乘以视图矩阵，得到光源在视图坐标系下的位置，传递给 vLight</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vec4 viewLight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> viewMatrix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vec4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(light, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vLight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> viewLight.xyz;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // projectionMatrix: 投影矩阵</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // modelViewMatrix: 模型视图矩阵，相当于视图矩阵 x 模型矩阵</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // position: 模型点坐标向量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  gl_Position </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> projectionMatrix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> modelViewMatrix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vec4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(position, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="片着色器" tabindex="-1">片着色器： <a class="header-anchor" href="#片着色器" aria-label="Permalink to &quot;片着色器：&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">varying vec3 vColor;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">varying vec3 vNormal;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">varying vec3 vLight;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这个 main 函数会被每个片元执行一次，并且是在 GPU 中并行执行的。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 根据把归一化后的光源方向，和法向量进行点乘，计算每个片元的亮度值。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  float diffuse </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">normalize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vLight), vNormal);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 根据亮度值，分别阶梯式地映射到新的亮度值，得到的 diffuse 是一个 0 到 1 之间的值。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (diffuse </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      diffuse </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (diffuse </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      diffuse </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (diffuse </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      diffuse </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      diffuse </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 基础颜色的 RGB 通道分别乘以阶梯式的亮度值，得到每个片元的颜色。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 并复制给 gl_FragColor 作为片元的颜色输出。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  gl_FragColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vec4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> diffuse, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> material </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> THREE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ShaderMaterial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vertexShader: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可以通过 AJAX 加载 *.vs 代码，内容传给这个变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fragmentShader: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  uniforms: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      color: {        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 苹果的基础色</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;v3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 指定变量类型为三维向量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          value: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> THREE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#60371b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      light: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;v3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          value: keyLight.position</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mesh.material </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> material;</span></span></code></pre></div>`,28);function C(b,x,B,q,P,S){const a=p("font");return k(),t("div",null,[d,o,n(a,{color:"red"},{default:l(()=>[s("漫反射光颜色 = 入射光颜色 x 表面基底色 x cosθ")]),_:1}),s(),i("p",null,[s("可以通过计算两个矢量的"),n(a,{color:"red"},{default:l(()=>[s("点积")]),_:1}),s("，来计算着两个矢量的夹角余弦值cosθ")]),n(a,{color:"red"},{default:l(()=>[s("漫反射光颜色 = 入射光颜色 x 表面基底色 x (光线方向 · 法线方向)")]),_:1}),s(),i("p",null,[s("这里有两点需要注意："),g,s(" （1）光线方向矢量和表面法线矢量的长度必须为1，否则反射光的颜色就会过暗或过亮。将一个矢量的长度调整为1，同时保持方向不变的过程称之为归一化。GLSL ES提供了内置的归一化函数，可以直接使用。"),c,s(" （2）"),n(a,{color:"orange"},{default:l(()=>[s("这里所谓的“光线方向”，实际上是入射方向的反方向，即从入射点指向光源方向（因为这样，该方向与法线方向的夹角才是入射角）")]),_:1})]),y,A,n(a,{color:"red"},{default:l(()=>[s("环境发射光颜色 = 入射光颜色 x 表面基底色")]),_:1}),s(),F,n(a,{color:"red"},{default:l(()=>[s("表面的反射光颜色 = 漫反射光颜色 + 漫反射光颜色")]),_:1}),s(),D,u,v,_,m,n(a,{color:"red"},{default:l(()=>[s("逆转置矩阵由矩阵先逆后转置，或者先转置后逆来得出。")]),_:1}),s(),f])}const j=h(E,[["render",C]]);export{N as __pageData,j as default};
